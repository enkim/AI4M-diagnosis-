#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun 18 17:46:54 2020

@author: Kimeunna
"""

# Import necessary packages 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import seaborn as sns 
sns.set()
os.chdir("/Users/Kimeunna/Dropbox/ML/AI4M") 

# Read csv file containing training datadata
train_df=pd.read_csv("nih/train-small.csv")

#Print first 5 rows 
print(f'Threre are {train_df.shape[0]} rows and {train_df.shape[1]} coloums in this data frame')

#Data types and null values check 

# Look at the data type of each column and whether null values are present 
train_df.info()

#Unique IDs check 
print(f"The total patient ids are {train_df['PatientId'].count()}, from those the unique ids are {train_df['PatientId'].value_counts().shape[0]} ")

#Explore data labels 

columns=train_df.keys()
columns=list(columns)
print(columns)


#Remove unnecessary elements 
columns.remove('Image')
columns.remove('PatientId')

#Get the total classes 
print(f"There are {len(columns)} columns of labels for these conditions: {columns}")

# Print out the number of positive labels for each class 
for column in columns: 
    print(f"The class {column} has {train_df[column].sum()} samples")
    
# Extract numpy values from Image column in data frame
images=train_df['Image'].values


# Extract 9 random images from it 
random_images=[np.random.choice(images) for i in range(9)]

#location of the image dir 
img_dir = 'nih/images-small/'

print('Display Random Images')

# Adjust the size of your images
plt.figure(figsize=(20,10))

# Iterate and plot random images 
for i in range(9): 
    plt.subplot(3,3,i+1)
    img=plt.imread(os.path.join(img_dir,random_images[i]))
    plt.imshow(img,cmap='gray')
    plt.axis('off')
    
#Adjust subplot parameters to give specified padding 
plt.tight_layout() 

# Get the first image that was listed in the train_df dataframe
sample_img=train_df.image[0]
raw_image=plt.imread(os.path.join(img_dir,sample_img))
plt.imshow(raw_image,cmap='gray')
plt.colorbar()
plt.title('Raw Chest X Ray Image')

print(f"The dimensions of the image are {raw_image.shape[0]} pixels width and {raw_image.shape[1]} pixels height, one single color channel")
print(f"The maximum pixel value is {raw_image.max():.4f} and the minimum is {raw_image.min():.4f}")
print(f"The mean value of the pixels is {raw_image.mean():.4f} and the standard deviation is {raw_image.std():.4f}")

# Plot a histogram of the distribution of the pixels 
sns.distplot(raw_image.ravel(), 
             label=f'Pixel Mean {np.mean(raw_image):.4f} & Standard Deviation {np.std(raw_image):.4f}', kde=False)
plt.legend(loc='upper center')
plt.title('Distribution of Pixel Intensities in the Image')
plt.xlabel('Pixel Intensity')
plt.ylabel('# Pixels in Image')
    
    
# Import data generator from keras
from keras.preprocessing.image import ImageDataGenerator 

#Normalize images 
image_generator=ImageDataGenerator(
    samplewise_center=True, #Set each sample mean to 0.
    samplewise_std_normalization= True # Divide each input by its standard deviation
) 
# Reducing image size down to 320x320 pixels 
# Flow from directory with specified batch size and target image size

generator = image_generator.flow_from_dataframe(
        dataframe=train_df,
        directory="nih/images-small/",
        x_col="Image", # features
        y_col= ['Mass'], # labels
        class_mode="raw", # 'Mass' column should be in train_df
        batch_size= 1, # images per batch
        shuffle=False, # shuffle the rows or not
        target_size=(320,320) # width and height of output image
)

# Plot a processed image
sns.set_style("white")
generated_image, label = generator.__getitem__(0)
plt.imshow(generated_image[0], cmap='gray')
plt.colorbar()
plt.title('Raw Chest X Ray Image')
print(f"The dimensions of the image are {generated_image.shape[1]} pixels width and {generated_image.shape[2]} pixels height")
print(f"The maximum pixel value is {generated_image.max():.4f} and the minimum is {generated_image.min():.4f}")
print(f"The mean value of the pixels is {generated_image.mean():.4f} and the standard deviation is {generated_image.std():.4f}")


# Include a histogram of the distribution of the pixels
sns.set()
plt.figure(figsize=(10, 7))

# Plot histogram for original iamge
sns.distplot(raw_image.ravel(), 
             label=f'Original Image: mean {np.mean(raw_image):.4f} - Standard Deviation {np.std(raw_image):.4f} \n '
             f'Min pixel value {np.min(raw_image):.4} - Max pixel value {np.max(raw_image):.4}',
             color='blue', 
             kde=False)

# Plot histogram for generated image
sns.distplot(generated_image[0].ravel(), 
             label=f'Generated Image: mean {np.mean(generated_image[0]):.4f} - Standard Deviation {np.std(generated_image[0]):.4f} \n'
             f'Min pixel value {np.min(generated_image[0]):.4} - Max pixel value {np.max(generated_image[0]):.4}', 
             color='red', 
             kde=False)

# Place legends
plt.legend()
plt.title('Distribution of Pixel Intensities in the Image')
plt.xlabel('Pixel Intensity')
plt.ylabel('# Pixel')
